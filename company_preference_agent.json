{
    "nodes": [
      {
        "parameters": {
          "mode": "insert",
          "mongoCollection": {
            "__rl": true,
            "value": "test_preferences_3",
            "mode": "list",
            "cachedResultName": "test_preferences_3"
          },
          "embedding": "=embedding",
          "metadata_field": "=details",
          "vectorIndexName": "preferences_vec",
          "embeddingBatchSize": 1,
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.vectorStoreMongoDBAtlas",
        "typeVersion": 1.3,
        "position": [
          1472,
          464
        ],
        "id": "a8ddd21e-dd2d-4bf5-a914-6b229fa4eb53",
        "name": "MongoDB Atlas Vector Store",
        "credentials": {
          "mongoDb": {
            "id": "38GyrX5rtJdH0Oyv",
            "name": "MongoDB account"
          }
        }
      },
      {
        "parameters": {
          "instructions": "parse a json which is there in string into a JSON object.",
          "codeGeneratedForPrompt": "parse a json which is there in string into a JSON object.",
          "jsCode": "const items = $input.all();\nconst parsedItems = items.map((item) => {\n  item.json.output = JSON.parse(item.json.output);\n  return item;\n});\nreturn parsedItems;\n"
        },
        "type": "n8n-nodes-base.aiTransform",
        "typeVersion": 1,
        "position": [
          1248,
          464
        ],
        "id": "8479260b-9074-4150-ad64-736f5f1d1381",
        "name": "AI Transform"
      },
      {
        "parameters": {
          "options": {
            "dimensions": "="
          }
        },
        "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "typeVersion": 1.2,
        "position": [
          1488,
          672
        ],
        "id": "f38b76e3-0d6f-460d-b332-c72aa35f4f92",
        "name": "Embeddings OpenAI1",
        "credentials": {
          "openAiApi": {
            "id": "Oyl0lNMG9z25dZEr",
            "name": "OpenAI"
          }
        }
      },
      {
        "parameters": {
          "jsonMode": "expressionData",
          "jsonData": "={{ $('AI Transform').item.json.output.details }}",
          "options": {
            "metadata": {
              "metadataValues": [
                {
                  "name": "=preference_type",
                  "value": "={{ $('AI Transform').item.json.output.preference_type }}"
                },
                {
                  "name": "=said_by",
                  "value": "={{ $('AI Transform').item.json.output.said_by }}"
                },
                {
                  "name": "date",
                  "value": "={{ $now }}"
                }
              ]
            }
          }
        },
        "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "typeVersion": 1.1,
        "position": [
          1632,
          656
        ],
        "id": "f0e963d7-4739-4220-8999-3fbb12e11f50",
        "name": "Default Data Loader1",
        "notesInFlow": true
      },
      {
        "parameters": {
          "promptType": "define",
          "text": "=Query: {{ $json.query }}\n\nYou are extracting a user preference from the given query.  \nOutput only a valid JSON object in the exact format below â€” no additional text, no explanations.  \n\nThe JSON should contain:\n- preference_type: a short, clear category describing the type of preference (e.g., \"response_style\", \"tool_usage\", \"project_priority\").  \n- details: a concise, plain-English sentence describing the preference.  \n- said_by: the name or identifier of the person who expressed the preference\n\nFormat:\n{\n  \"preference_type\": \"string\",\n  \"details\": \"string\",\n  \"said_by\": \"string\"\n}\n\nReturn only the JSON. No extra commentary or formatting.",
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.agent",
        "typeVersion": 2.1,
        "position": [
          848,
          464
        ],
        "id": "6612032f-d5f3-4571-a25a-ee0688fa05c1",
        "name": "AI Agent1"
      },
      {
        "parameters": {
          "model": {
            "__rl": true,
            "mode": "list",
            "value": "gpt-4.1-mini"
          },
          "options": {}
        },
        "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "typeVersion": 1.2,
        "position": [
          896,
          672
        ],
        "id": "b2143a3d-8eb0-48fc-bff1-ee249f7d8ec6",
        "name": "OpenAI Chat Model1",
        "credentials": {
          "openAiApi": {
            "id": "Oyl0lNMG9z25dZEr",
            "name": "OpenAI"
          }
        }
      }
    ],
    "connections": {
      "AI Transform": {
        "main": [
          [
            {
              "node": "MongoDB Atlas Vector Store",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "Embeddings OpenAI1": {
        "ai_embedding": [
          [
            {
              "node": "MongoDB Atlas Vector Store",
              "type": "ai_embedding",
              "index": 0
            }
          ]
        ]
      },
      "Default Data Loader1": {
        "ai_document": [
          [
            {
              "node": "MongoDB Atlas Vector Store",
              "type": "ai_document",
              "index": 0
            }
          ]
        ]
      },
      "AI Agent1": {
        "main": [
          [
            {
              "node": "AI Transform",
              "type": "main",
              "index": 0
            }
          ]
        ]
      },
      "OpenAI Chat Model1": {
        "ai_languageModel": [
          [
            {
              "node": "AI Agent1",
              "type": "ai_languageModel",
              "index": 0
            }
          ]
        ]
      }
    },
    "pinData": {},
    "meta": {
      "templateId": "self-building-ai-agent",
      "templateCredsSetupCompleted": true,
      "instanceId": "3ce7b1b87fd23609e6a95ea70586f960234533a52992e922796e5938aa3dd7dc"
    }
  }